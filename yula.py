import logging
import time

import pymongo
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

bot = Bot("1490467845:AAHp3p3evm1MQ-LnwFi9Zhhw0Ui38xfRpLs")
db = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)
client = pymongo.MongoClient(
    'mongodb+srv://SkyDeaD:GamerVD76@aliceskybotandother-ik6lu.mongodb.net/sl?retryWrites=true&w=majority')
dbm = client.sl
users = dbm.users


banuser = 0
admuser = 0
userstatus = 0
useradm = 0
unmuteuser = 0; key = 0


@db.message_handler(lambda message: message.chat.type == 'private', commands=['start'])
async def start_handler(message):
    await message.reply(F'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–ù–∞–∂–º–∏ üëâ/helpüëà ')


@db.message_handler(commands=['help'])
async def help_handler(message: types.Message):
    if message.chat.type == 'private':
        q = await bot.get_chat(577096232)
        c = await bot.get_chat(-1001484115605)
        await message.reply(F'''
–Ø - –±–æ—Ç –Æ–≤–∞–æ, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π üëâ[{q.first_name}](tg://user?id=577096232)üëà 

–ë–æ—Ç —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –¥–ª—è –∫–æ–Ω—Ñ—ã üëâ[{c.title}](https://t.me/YgolokNeko)üëà


–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:

*üë§me* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ.

*‚ÑπÔ∏èinfo* - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ.

*üåüadmins* - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

*üìúrules* - –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.

*‚úÇsetrules* - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.

*üóûdelrules* - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–ª–∞ —á–∞—Ç–∞.

*ü§êMute* - –∫–∏–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º—É—Ç.

*üò¨Amute* - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞.

*üòÄUnmute* - —Ä–∞–∑–º—É—á–µ–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*üòÉUnban* - —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*ü§ïKick* - –≤—ã–≥–æ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*üò£Akick* - –ø–æ–ø—ã—Ç–∫–∞ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞.

*üìåPin* - –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*‚ùåUnpin* - –æ—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*üö´Delete* - —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*üßπPurge* - —á–∏—Å—Ç–∏—Ç —á–∞—Ç. –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å—ë —Ç–æ, —á—Ç–æ –Ω–∏–∂–µ –µ–≥–æ.

*‚è´Promote* - –ø–æ–≤—ã—à–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞; –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.

*‚è¨Demote* - –ø–æ–Ω–∏–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞; –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.

–¢–∞–∫ –∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—Ç—É—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ.


–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –º–Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:

„ÄΩÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≥—Ä—É–ø–ø—ã
‚ùå–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
üìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üì®–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
üìå–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
‚≠êÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
''', parse_mode='markdown')
    else:
        await message.reply('''
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:

*üë§me* - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ.

*‚Ñπinfo* - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≥—Ä—É–ø–ø–µ.

*üåüadmins* - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

*üìúrules* - –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.

*‚úÇsetrules* - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞.

*üóûdelrules* - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–ª–∞ —á–∞—Ç–∞.

*ü§êMute* - –∫–∏–¥–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º—É—Ç.

*üò¨Amute* - –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞.

*üòÄUnmute* - —Ä–∞–∑–º—É—á–µ–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*üòÉUnban* - —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*ü§ïKick* - –≤—ã–≥–æ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

*üò£Akick* - –ø–æ–ø—ã—Ç–∫–∞ –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –≥—Ä—É–ø–ø—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —á–µ—Ä–µ–∑ –±–æ—Ç–∞.

*üìåPin* - –∑–∞–∫—Ä–µ–ø–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*‚ùåUnpin* - –æ—Ç–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*üö´Delete* - —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

*üßπPurge* - —á–∏—Å—Ç–∏—Ç —á–∞—Ç. –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å—ë —Ç–æ, —á—Ç–æ –Ω–∏–∂–µ –µ–≥–æ.

*‚è´Promote* - –ø–æ–≤—ã—à–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞; –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.

*‚è¨Demote* - –ø–æ–Ω–∏–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞; –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–∞—Ç–∞.

–¢–∞–∫ –∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—Ç—É—Å—Ç–≤—É—é—Ç –≤ —Å–ø–∏—Å–∫–µ.
''', parse_mode='markdown')


@db.message_handler(content_types=['new_chat_members'])
async def handler_new_member(message: types.Message):
    global unmuteuser
    global key
    for user in message.new_chat_members:
        if user.id in [1490467845]:
            await bot.send_message(message.chat.id,
                                   '–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Æ–≤–∞–æ. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç—ã –≤—ã–¥–∞–π –º–Ω–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:\n\n„ÄΩÔ∏è–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≥—Ä—É–ø–ø—ã\n‚ùå–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\nüì®–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏\nüìå–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n‚≠êÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')
        else:
            for user in message.new_chat_members:
                unmuteuser = user.id
                sti = open('welcome.webp', 'rb')
                keyboard = types.InlineKeyboardMarkup(row_width=1)
                item1 = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å –æ–±—â–∞—Ç—å—Å—è', callback_data='3')
                key = keyboard.add(item1)
                await bot.send_sticker(message.chat.id, sti, reply_to_message_id=message.message_id)
                await bot.send_message(message.chat.id,
                                       F'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç [{message.chat.title}](https://t.me/{message.chat.username}), [{user.first_name}](tg://user?id={user.id})!\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏:\nüëâ/rulesüëà',
                                       reply_to_message_id=message.message_id, reply_markup=keyboard,
                                       parse_mode='markdown')
                await bot.restrict_chat_member(message.chat.id, user.id,
                                               until_date=time.time())


@db.message_handler(lambda message: message.chat.type != 'private', commands=['mute'])
async def handle_mute(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥—ã.')
        return
    if usera.can_restrict_members is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is not True:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status in ['administrator', 'creator']:
        await message.reply('–Ø –Ω–µ –±—É–¥—É –º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    if user.can_send_messages is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –∏ —Ç–∞–∫ –º–æ–ª—á–∏—Ç.',
            parse_mode='markdown')
        return
    await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=time.time())
    await message.reply(
        F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –ø–æ—Ç–µ—Ä—è–ª –≥–æ–ª–æ—Å.',
        parse_mode='markdown')
    sticker_mute = open('mute.webp', 'rb')
    await message.answer_sticker(sticker_mute)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['muteall'])
async def handle_muteall(message: types.Message):
    if message.from_user.id not in [691117028, 1192665194]:
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        return
    permissions = types.ChatPermissions(can_send_messages=False, can_send_media_messages=False,
                                        can_send_polls=False, can_send_other_messages=False,
                                        can_add_web_page_previews=False, can_invite_users=False)
    await bot.set_chat_permissions(message.chat.id, permissions)
    sticker_allmute = open('allmute.webp', 'rb')
    await message.answer_sticker(sticker_allmute)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['unmuteall'])
async def handle_unmuteall(message: types.Message):
    if message.from_user.id not in [691117028, 1192665194]:
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        return
    permissions = types.ChatPermissions(can_send_messages=True, can_send_media_messages=True,
                                        can_send_polls=True, can_send_other_messages=True,
                                        can_add_web_page_previews=True, can_invite_users=True)
    await bot.set_chat_permissions(message.chat.id, permissions)
    sticker_unallmute = open('unmuteall.webp', 'rb')
    await message.answer_sticker(sticker_unallmute)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['amute'])
async def handle_amute(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.can_send_messages is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –∏ —Ç–∞–∫ –º–æ–ª—á–∏—Ç.',
            parse_mode='markdown')
        return
    try:
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=time.time())
        await message.reply(
            F'–£ [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –±—ã–ª —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ—Ç–µ—Ä—è–ª –≥–æ–ª–æ—Å.',
            parse_mode='markdown')
        sticker_mute = open('mute.webp', 'rb')
        await message.answer_sticker(sticker_mute)
    except:
        await message.reply('–Ø –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        sticker_nonmute = open('cant.webp', 'rb')
        await message.answer_sticker(sticker_nonmute)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['unmute'])
async def handle_unmute(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        return
    if usera.can_restrict_members is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status in ['administrator', 'creator']:
        await message.reply('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –º—É—Ç–µ.')
        return
    if user.can_send_messages in [True, None]:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ –≤ –º—É—Ç–µ.',
            parse_mode='markdown')
        return
    await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, can_send_messages=True,
                                   can_send_media_messages=True, can_send_other_messages=True,
                                   can_add_web_page_previews=True)
    await message.reply(
        F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å.',
        parse_mode='markdown')
    sticker_unmute = open('unmute.webp', 'rb')
    await message.answer_sticker(sticker_unmute)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['promote'])
async def handle_promote(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_promote_members is not True:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚≠êÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status in ['administrator', 'creator']:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!',
            parse_mode='markdown')
        return
    await message.reply(
        F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –ø–æ–≤—ã—à–µ–Ω(–∞)!',
        parse_mode='markdown')
    await bot.promote_chat_member(message.chat.id, message.reply_to_message.from_user.id, can_change_info=True,
                                  can_delete_messages=True, can_invite_users=True, can_restrict_members=True,
                                  can_pin_messages=True, can_promote_members=True)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['demote'])
async def handle_demote(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_promote_members is not True:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚≠êÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status not in ['administrator', 'creator']:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
            parse_mode='markdown')
        return
    await message.reply(
        F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –ø–æ–Ω–∏–∂–µ–Ω(–∞)!',
        parse_mode='markdown')
    await bot.promote_chat_member(message.chat.id, message.reply_to_message.from_user.id, can_change_info=False,
                                  can_delete_messages=False, can_invite_users=False, can_restrict_members=False,
                                  can_pin_messages=False, can_promote_members=False)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['kick'])
async def handle_kick(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if usera.can_restrict_members is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is not True:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status in ['administrator', 'creator']:
        await message.reply('–Ø –Ω–µ –º–æ–≥—É –∫–∏–∫–Ω—É—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        return
    await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await message.reply(
        F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) —Ä–µ—à–∏–ª(–∞) –æ—Ç–æ–π—Ç–∏ üòÑ',
        parse_mode='markdown')
    sticker_kick = open('kick.webp', 'rb')
    await message.answer_sticker(sticker_kick)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['akick'])
async def handle_akick(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    try:
        await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        await bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) —Ä–µ—à–∏–ª(–∞) –æ—Ç–æ–π—Ç–∏ üòÑ',
            parse_mode='markdown')
        sticker_kick = open('kick.webp', 'rb')
        await message.reply_sticker(sticker_kick)
    except:
        await message.reply('–Ø –Ω–µ –º–æ–≥—É –∫–∏–∫–Ω—É—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        sticker_nonkick = open('cant.webp', 'rb')
        await message.answer_sticker(sticker_nonkick)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['unban'])
async def handle_unban(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if usera.can_restrict_members is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_restrict_members is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
        return
    if message.reply_to_message is None:
        await message.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ –∫–æ–º –∏–¥—ë—Ç —Ä–µ—á—å?')
        return
    user = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_member is False:
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.',
            parse_mode='markdown')
        return
    if user.status != 'restricted':
        await message.reply(
            F'[{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –Ω–µ –∑–∞–±–∞–Ω–µ–Ω.',
            parse_mode='markdown')
        return
    await bot.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    await message.reply(
        F'–õ–∞–¥–Ω–æ, [{message.reply_to_message.from_user.first_name}](tg://user?id={message.reply_to_message.from_user.id}) –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è.',
        parse_mode='markdown')
    sticker_unban = open('unban.webp', 'rb')
    await message.answer_sticker(sticker_unban)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['pin'])
async def handle_pin(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if usera.can_pin_messages is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_pin_messages is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìå–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    if message.reply_to_message is None:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–∏—Ç—å.')
        return
    await bot.pin_chat_message(message.chat.id, message.reply_to_message.message_id)
    await message.delete()


@db.message_handler(lambda message: message.chat.type != 'private', commands=['unpin'])
async def handle_unpin(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if usera.can_pin_messages is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_pin_messages is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìå–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    await bot.unpin_chat_message(message.chat.id)
    await message.delete()


@db.message_handler(lambda message: message.chat.type != 'private', commands=['del'])
async def handle_del(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if usera.can_delete_messages is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_delete_messages is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚ùå–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    if message.reply_to_message is None:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.')
        return
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.reply_to_message.message_id)


@db.message_handler(lambda message: message.chat.type != 'private', commands=['purge'])
async def handle_purge(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status not in ['administrator', 'creator']:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    prom = await bot.get_chat_member(message.chat.id, 1490467845)
    if prom.can_delete_messages is False:
        await message.reply(
            '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n‚ùå–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    if usera.can_delete_messages is False:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if message.reply_to_message is None:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω —á–∞—Ç.')
        return
    i = message.reply_to_message.message_id
    q = message.message_id
    for d in range(i, q):
        try:
            await bot.delete_message(message.chat.id, d)
        except:
            pass
    await message.delete()
    await message.answer('–ß–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')


@db.message_handler(lambda message: message.chat.type != 'private', commands=['setrules'])
async def handle_rules(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if message.from_user.id not in [1192665194]:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    x = users.find_one({'rules': {'$exists': True}, 'chatid': message.chat.id})
    if x is None:
        rules = message.reply_to_message.text
        users.insert_one({'rules': rules, 'chatid': message.chat.id})
        await message.reply(F'–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ [{message.chat.title}](https://t.me/{message.chat.username}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.',
                            parse_mode='markdown')
    elif x is not None:
        rules = message.reply_to_message.text
        users.delete_one({'rules': {'$exists': True}, 'chatid': message.chat.id})
        users.insert_one({'rules': rules, 'chatid': message.chat.id})
        await message.reply(F'–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ [{message.chat.title}](https://t.me/{message.chat.username}) –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
                            parse_mode='markdown')


@db.message_handler(lambda message: message.chat.type != 'private', commands=['delrules'])
async def handle_rules(message: types.Message):
    usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
    if usera.status != 'creator':
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    if message.from_user.id not in [1192665194]:
        await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    users.delete_one({'rules': {'$exists': True}, 'chatid': message.chat.id})
    await message.reply(F'–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ [{message.chat.title}](https://t.me/{message.chat.username}) —É–¥–∞–ª–µ–Ω—ã.',
                        parse_mode='markdown')


@db.message_handler(lambda message: message.chat.type != 'private', commands=['rules'])
async def handle_rules(message: types.Message):
    x = users.find_one({'rules': {'$exists': True}, 'chatid': message.chat.id})
    if x is None:
        await bot.send_message(message.chat.id, F'–í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª.',
                               reply_to_message_id=message.message_id, parse_mode='markdown')
    else:
        for rul in users.find({'chatid': message.chat.id}):
            await bot.send_message(message.chat.id, rul['rules'], reply_to_message_id=message.message_id,
                                   parse_mode='markdown')


@db.message_handler(lambda message: message.chat.type != 'private', commands=["report"])
async def handle_report(message: types.Message):
    if message.reply_to_message is None:
        await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è.')
        return
    adm = await bot.get_chat_administrators(message.chat.id)
    text = '–ù–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞.\n\n'
    for i in adm:
        if i.user.is_bot is False:
            if i.can_restrict_members is not False:
                text += f"\n@{i.user.username}"
    await message.reply(text)


@db.message_handler(commands=['me'])
async def handle_message(message: types.Message):
    await bot.send_message(message.chat.id, F''' 
*–í–∞—à–µ –∏–º—è*: `{message.from_user.first_name}`
*–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º*: `@{message.from_user.username}`
*–í–∞—à ID*: `{message.from_user.id} `
''', reply_to_message_id=message.message_id, parse_mode='markdown')


@db.message_handler(lambda message: message.chat.type != 'private', commands=['info'])
async def handle_info(message: types.Message):
    if message.reply_to_message is not None:
        adm = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        group_id = await bot.get_chat(message.chat.id)
        await message.reply(F'''
*üöª–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{message.reply_to_message.from_user.first_name}`
*üñã–Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `@{message.reply_to_message.from_user.username}`
*‚ÑπÔ∏èID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{message.reply_to_message.from_user.id}`
*üì´–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{adm.status}`
*üìï–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã*: `{group_id.title}`
*üÜîID –≥—Ä—É–ø–ø—ã*: `{group_id.id}`
*üî†–¢–∏–ø –≥—Ä—É–ø–ø—ã*: `{group_id.type}`
''', parse_mode='markdown')
        return
    adm = await bot.get_chat_member(message.chat.id, message.from_user.id)
    group_id = await bot.get_chat(message.chat.id)
    await message.reply(F'''
*üöª–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{message.from_user.first_name}`
*üñã–Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `@{message.from_user.username}`
*‚ÑπÔ∏èID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{message.from_user.id}`
*üì´–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*: `{adm.status}`
*üìï–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã*: `{group_id.title}`
*üÜîID –≥—Ä—É–ø–ø—ã*: `{group_id.id}`
*üî†–¢–∏–ø –≥—Ä—É–ø–ø—ã*: `{group_id.type}`
''', parse_mode='markdown')


@db.message_handler(lambda message: message.chat.type != 'private', commands=['admins'])
async def handle_admins(message: types.Message):
    adm = await bot.get_chat_administrators(message.chat.id)
    text = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞:\n'
    for i in adm:
        if i.user.is_bot is False:
            if i.can_restrict_members is not False:
                text += f'\n–ò–º—è - {i.user.first_name}\n–Æ–∑–µ—Ä–Ω–µ–π–º - {i.user.username}\n'
    await message.reply(text)




@db.callback_query_handler(text='1')
async def button_reaction(call: types.CallbackQuery):
    global banuser
    global admuser
    global useradm
    global userstatus
    if call.message:
        if call.from_user.id == admuser and userstatus.status in ['creator']:
            try:
                await bot.kick_chat_member(chat_id=call.message.chat.id, user_id=banuser)
                await call.message.edit_caption(F'*‚Äî‚Äî–ê–¥–º–∏–Ω—ã –∫–∞–∑–Ω–∏–ª–∏* [–Ω–µ–≤–µ—Ä–Ω–æ–≥–æ](tg://user?id={banuser})!‚Äî‚Äî',
                                                parse_mode='markdown')
                await bot.send_animation(chat_id=call.message.chat.id,
                                         animation='CgACAgIAAxkBAAMSX7VxHT5zaq-vpOtx5R13mzVPZccAAuoJAAKJuelKbiiXGjLSwoweBA',
                                         reply_to_message_id=call.message.message_id)
            except:
                await call.message.edit_caption('*‚Äî‚Äî‚Äî–û—à–∏–±–∫–∞!‚Äî‚Äî‚Äî*', parse_mode='markdown')
        elif call.from_user.id == admuser and userstatus.status in ['administrator']:
            if useradm.status == 'creator':
                await call.message.edit_caption('*+++++–ë–∞—Ç—é —É–±–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Å–∏—Ç–µ —Å–æ—Å–Ω—É+++++*',
                                                parse_mode='markdown')
            elif useradm.status != 'administrator':
                await bot.kick_chat_member(chat_id=call.message.chat.id, user_id=banuser)
                await call.message.edit_caption(F'*‚Äî‚Äî–ê–¥–º–∏–Ω—ã –∫–∞–∑–Ω–∏–ª–∏* [–Ω–µ–≤–µ—Ä–Ω–æ–≥–æ](tg://user?id={banuser})!‚Äî‚Äî',
                                                parse_mode='markdown')
                await bot.send_animation(chat_id=call.message.chat.id,
                                         animation='CgACAgIAAxkBAAMSX7VxHT5zaq-vpOtx5R13mzVPZccAAuoJAAKJuelKbiiXGjLSwoweBA',
                                         reply_to_message_id=call.message.message_id)
            else:
                await call.message.edit_caption('*‚Äî‚Äî‚Äî–û—à–∏–±–∫–∞!‚Äî‚Äî‚Äî*', parse_mode='markdown')


@db.callback_query_handler(text='2')
async def button_reaction(call: types.CallbackQuery):
    global banuser
    global admuser
    if call.message:
        if call.from_user.id == admuser:
            await call.message.edit_caption(
                '\*\*\*' + '*–ê–¥–º–∏–Ω—ã –º–∏–ª–æ—Å–µ—Ä–¥–Ω–æ –ø—Ä–æ—Å—Ç–∏–ª–∏*' + ' ' + F'[–ê–Ω–æ–Ω–∏–º–∞](tg://user?id={banuser})' + '*; —Å—Ç—É–ø–∞–π —Å –º–∏—Ä–æ–º.*' + '\*\*\*',
                parse_mode='markdown')
            await bot.send_animation(chat_id=call.message.chat.id,
                                     animation='CgACAgIAAxkBAAMTX7Vx9Zx0TPmhcVTWbCFXk3zmbOsAAucJAAJLC6hJDVEIyeQ9E7UeBA',
                                     reply_to_message_id=call.message.message_id)


@db.callback_query_handler(text='3')
async def button_reaction(call: types.CallbackQuery):
    global unmuteuser
    if call.message:
        if call.from_user.id == unmuteuser:
            await bot.restrict_chat_member(chat_id=call.message.chat.id, user_id=unmuteuser,
                                           can_send_messages=True,
                                           can_send_media_messages=True, can_send_other_messages=True,
                                           can_add_web_page_previews=True)
            await call.message.delete_reply_markup()


@db.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    if message.text.lower() == '–º—è—É–∫—É—Å—å':
        if message.chat.type == 'private':
            return
        if message.reply_to_message is None:
            return
        if message.from_user.id != message.reply_to_message.from_user.id:
            user1 = await bot.get_chat_member(message.chat.id, message.from_user.id)
            user2 = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            if user1.status not in ['administrator', 'creator']:
                await bot.restrict_chat_member(message.chat.id, message.from_user.id, until_date=time.time())
            if user2.status not in ['administrator', 'creator']:
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id,
                                               until_date=time.time())
            await bot.send_message(message.chat.id,
                                   F'*{message.from_user.first_name}* –∏ *{message.reply_to_message.from_user.first_name}* —Ä–∞–∑–æ–∑–ª–∏–ª–∏ –Æ–ª—è-—Ç—è–Ω –∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä—ã–±–∫–æ–π –ø–æ –≥–æ–ª–æ–≤–µ.',
                                   reply_to_message_id=message.message_id, parse_mode='markdown')

    elif message.text.lower() == '—é–≤–∞–æ–±–∞–Ω—É—Å':
        prom = await bot.get_chat_member(message.chat.id, 1490467845)
        if prom.can_restrict_members is False:
            await message.reply(
                '–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\nüìõ–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
            return
        if message.reply_to_message is None:
            return
        if message.chat.type == 'private':
            return
        usera = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if usera.status not in ['administrator', 'creator']:
            return
        if usera.can_restrict_members is False:
            await message.reply('–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
            return
        global banuser
        banuser = message.reply_to_message.from_user.id
        global admuser
        admuser = message.from_user.id
        global userstatus
        userstatus = await bot.get_chat_member(message.chat.id, message.from_user.id)
        global useradm
        useradm = await bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton(text='–í—ã–≥–Ω–∞—Ç—å –ø–ª–æ—Ö–∏—à–∞', callback_data='1')
        item2 = types.InlineKeyboardButton(text='–ü—Ä–æ—Å—Ç–∏—Ç—å –∏ –ø–æ–Ω—è—Ç—å', callback_data='2')
        keyboard.add(item1, item2)
        await bot.send_photo(message.chat.id,
                             'AgACAgIAAxkBAAMQX7Vub4z8vRMhFX5WnPETNii1-5IAAi6xMRuwg6lJQzUCj1aT6NdLC-SXLgADAQADAgADeAADrDMDAAEeBA',
                             F'–†–µ—à–∞–µ—Ç—Å—è —Å—É–¥—å–±–∞ [–ê–Ω–æ–Ω–∏–º–∞](tg://user?id={message.reply_to_message.from_user.id}), –ê–¥–º–∏–Ω—ã, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!',
                             reply_to_message_id=message.message_id, reply_markup=keyboard, parse_mode='markdown')

if __name__ == '__main__':
    executor.start_polling(db, skip_updates=True)
